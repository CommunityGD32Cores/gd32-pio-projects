; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env]
platform = https://github.com/CommunityGD32Cores/platform-gd32.git
platform_packages = 
    framework-spl-gd32@https://github.com/CommunityGD32Cores/gd32-pio-spl-package.git
monitor_speed = 115200

; use cool platformio.ini features to put general settings for bootlaoder
; and application settings here, will be inherited from.
[bootloader_settings]
; self-limit to 16 kByte (0x4000) flash size
board_upload.maximum_size = 16384
; build bootloader by excluding application files in src/
build_src_filter = +<*> -<application/>

[application_settings]
; tell PlatformIO where we want to be uploaded
; also sets flash origin address in linker script
board_upload.offset_address = 0x8004000
; tell SPL framework to set vector table to "ours"
; which is at offset 0x4000 from start of flash.
app_build_flags = 
  -DVECT_TAB_OFFSET=0x4000
; build application by excluding bootloader files in src/
build_src_filter = +<*> -<bootloader/>

; Environments for each board

; GD32350G-START board
[env:gd32350g_start_booloader]
board = gd32350g_start
framework = spl
; inherit all bootloader settings
extends = bootloader_settings
; since the GD3250G start board has PA9 (USART0 TX) connected to USB +5V, 
; we need to use the USART0 on other pins (PB6 = TX, PB7 = RX).
build_flags = -DUSE_ALTERNATE_USART0_PINS

[env:gd32350g_start_application]
board = gd32350g_start
framework = spl
; inherit all app settings
extends = application_settings
; additionally self-limit to 64k - 16k = 48k of flash
; (the chip on this board has 64k of flash)
board_upload.maximum_size = 49152
; set build flags as wanted plus our own
build_flags = 
  ${application_settings.app_build_flags}
  -DUSE_ALTERNATE_USART0_PINS ; stil use alternative UART pins

; GD32F103C8 (uses regular UART pins)
[env:genericGD32F103C8_bootloader]
board = genericGD32F103C8
framework = spl
extends = bootloader_settings

[env:genericGD32F103C8_application]
board = genericGD32F103C8
framework = spl
extends = bootloader_settings
; 64k - 16k = 48k
board_upload.maximum_size = 49152
build_flags = ${application_settings.app_build_flags}
